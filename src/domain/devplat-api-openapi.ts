/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
	"/entities": {
		get: operations["GetEntities"];
		post: operations["Create"];
	};
	"/status/{instanceId}": {
		get: operations["GetStatus"];
	};
	"/entities/{kind}": {
		get: operations["GetEntitiesByKind"];
	};
	"/entities/{kind}/{namespace}/{name}": {
		get: operations["GetEntity"];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		DurableTaskResult: {
			id?: string | null;
		};
		Entity: {
			/**
			 * @description The version of specification format for this particular entity that this is written against.
			 * @default developer.microsoft.com/v1
			 * @example developer.microsoft.com/v1
			 */
			apiVersion: string;
			/**
			 * @description The high level entity type being described.
			 * @example kind
			 */
			kind: string;
			metadata: components["schemas"]["Metadata"];
			/** @description The specification data describing the entity itself. */
			spec: components["schemas"]["Spec"] | components["schemas"]["TemplateSpec"] | components["schemas"]["UserSpec"];
			status?: components["schemas"]["Status"];
			/** @description The relations that this entity has with other entities. */
			relations?: components["schemas"]["Relation"][] | null;
		};
		EntityPlan: {
			/**
			 * @description The kind of the resulting entity.
			 * @example kind
			 */
			kind?: string;
			/**
			 * @description The namespace that the resulting entity will belong to.
			 * @default default
			 * @example namespace
			 */
			namespace?: string;
			/** @description A map of key-value pairs of identifying information for the resulting entity. */
			labels?: {
				[key: string]: string;
			} | null;
		};
		/**
		 * @description A reference by name to another entity.
		 * @example {kind}:[{namespace}/]{name}
		 */
		EntityRef: {
			/**
			 * @description The high level entity type being described.
			 * @example kind
			 */
			kind?: string;
			/**
			 * @description The name of the entity. Must be unique within the catalog at any given point in time, for any given namespace + kind pair.
			 * @example name
			 */
			name: string;
			/**
			 * @description The namespace that the entity belongs to.
			 * @default default
			 * @example namespace
			 */
			namespace?: string;
		};
		/** @description External hyperlink related to an entity. */
		Link: {
			/**
			 * @description A url in a standard uri format
			 * @example https://example.com/some/page
			 */
			url: string;
			/**
			 * @description A user friendly display name for the link.
			 * @example Documentation
			 */
			title?: string | null;
			/**
			 * @description A key representing a visual icon to be displayed in the UI.
			 * @example file
			 */
			icon?: string | null;
			/**
			 * @description An optional value to categorize links into specific groups.
			 * @example docs
			 */
			type?: string | null;
		};
		/** @description Metadata common to all versions/kinds of entities. */
		Metadata: {
			/**
			 * @description The name of the entity. Must be unique within the catalog at any given point in time, for any given namespace + kind pair.
			 * @example name
			 */
			name: string;
			/**
			 * @description The namespace that the entity belongs to.
			 * @default default
			 * @example namespace
			 */
			namespace?: string;
			/**
			 * @description The ID of the provider of the entity.
			 * @example github.com
			 */
			provider: string;
			/**
			 * @description A unique identifier for the entity.
			 * @example 6d96252c-a735-497a-b90e-27fbd799e9c6
			 */
			uid?: string | null;
			/**
			 * @description The tenant ID of the user who created the entity.
			 * @example 6d96252c-a735-497a-b90e-27fbd799e9c6
			 */
			tenant?: string | null;
			/** @description A display name for the entity that is suitable for presentation to a user. */
			title?: string | null;
			/** @description A short (typically relatively few words, on one line) description of the entity. */
			description?: string | null;
			/** @description A map of key-value pairs of identifying information for the entity. */
			labels?: {
				[key: string]: string;
			} | null;
			/** @description A map of key-value pairs of non-identifying information for the entity. */
			annotations?: {
				[key: string]: string;
			} | null;
			/** @description A list of external hyperlinks related to the entity. */
			links?: components["schemas"]["Link"][] | null;
			/** @description A list of single-value tags for the entity. */
			tags?: string[] | null;
		};
		/** @description A directed relation from one entity to another. */
		Relation: {
			/** @description The type of relation. */
			type: string;
			targetRef: components["schemas"]["EntityRef"] | string;
		};
		/** @description The specification data describing the entity itself. */
		Spec: Record<string, never>;
		/** @description The current status of the entity. */
		Status: Record<string, never>;
		TemplateRequest: {
			/**
			 * @description A reference by name to a template.
			 * @example template:[{namespace}/]{name}
			 */
			templateRef: components["schemas"]["EntityRef"] | string;
			/** @description The ID of the provider of the template. */
			provider: string;
			/** @description The input JSON to the template. */
			inputJson: string;
		};
		TemplateResponse: Record<string, never>;
		/** @description The specification data describing the template. */
		TemplateSpec: ({
			/** @description A JSON Schema that defines user inputs for a template. */
			inputJsonSchema?: string | null;
			inputUiSchema?: string | null;
			/** @description Details of the entities that the template creates. */
			creates?: components["schemas"]["EntityPlan"][] | null;
		}) & components["schemas"]["Spec"];
		/** @description The profile of the user. */
		UserProfile: {
			/**
			 * @description A simple display name to present to users.
			 * @example John Doe
			 */
			displayName?: string | null;
			/** @description The job title of the user. */
			jobTitle?: string | null;
			/**
			 * @description The email address of the user.
			 * @example john.doe@email.com
			 */
			email?: string | null;
		};
		/**
		 * @description The role of the user.
		 * @enum {string}
		 */
		UserRole: "None" | "Member" | "Admin" | "Owner" | "Provider";
		/** @description The specification data describing the user. */
		UserSpec: ({
			role?: components["schemas"]["UserRole"];
			profile?: components["schemas"]["UserProfile"];
			memberOf?: ((components["schemas"]["EntityRef"] | string)[]) | null;
		}) & components["schemas"]["Spec"];
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

	GetEntities: {
		responses: {
			/** @description OK */
			200: {
				content: {
					"application/json": components["schemas"]["Entity"][];
					"application/yaml": components["schemas"]["Entity"][];
				};
			};
		};
	};
	Create: {
		requestBody?: {
			content: {
				"application/json": components["schemas"]["TemplateRequest"];
			};
		};
		responses: {
			/** @description Accepted */
			202: {
				content: {
					"application/json": components["schemas"]["DurableTaskResult"];
				};
			};
		};
	};
	GetStatus: {
		parameters: {
			path: {
				instanceId: string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					"application/json": components["schemas"]["TemplateResponse"];
				};
			};
			/** @description Accepted */
			202: {
				content: {
					"application/json": components["schemas"]["DurableTaskResult"];
				};
			};
			/** @description Not Found */
			404: {
				content: never;
			};
			/** @description Gone */
			410: {
				content: never;
			};
		};
	};
	GetEntitiesByKind: {
		parameters: {
			path: {
				kind: string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					"application/json": components["schemas"]["Entity"][];
					"application/yaml": components["schemas"]["Entity"][];
				};
			};
		};
	};
	GetEntity: {
		parameters: {
			path: {
				kind: string;
				namespace: string;
				name: string;
			};
		};
		responses: {
			/** @description OK */
			200: {
				content: {
					"application/json": components["schemas"]["Entity"];
					"application/yaml": components["schemas"]["Entity"];
				};
			};
			/** @description Not Found */
			404: {
				content: never;
			};
		};
	};
}
